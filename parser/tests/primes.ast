Program: 
    FuncDef: 
        Type: ['int']   @ 3:1
        Decl: ID(name='main'  )
            FuncDecl: 
                VarDecl: 
                    Type: ['int']   @ 3:1
        Compound:    @ 3:1
            Decl: ID(name='n1'  )
                VarDecl: 
                    Type: ['int']   @ 4:5
            Decl: ID(name='n2'  )
                VarDecl: 
                    Type: ['int']   @ 4:5
            Decl: ID(name='i'  )
                VarDecl: 
                    Type: ['int']   @ 4:5
            Decl: ID(name='j'  )
                VarDecl: 
                    Type: ['int']   @ 4:5
            Decl: ID(name='flag'  )
                VarDecl: 
                    Type: ['int']   @ 4:5
            Print:    @ 6:5
                Constant: string, "Enter 2 numbers (intervals) separated by space: "   @ 6:11
            Read:    @ 7:5
                ExprList:    @ 7:10
                    ID: n1   @ 7:10
                    ID: n2   @ 7:14
            Print:    @ 8:5
                ExprList:    @ 8:11
                    Constant: string, "Prime numbers between "   @ 8:11
                    ID: n1   @ 8:37
                    Constant: string, " and "   @ 8:41
                    ID: n2   @ 8:50
                    Constant: string, " are:\n"   @ 8:54
            For:    @ 9:5
                Assignment: =   @ 9:10
                    ID: i   @ 9:10
                    ID: n1   @ 9:14
                BinaryOp: <=   @ 9:18
                    ID: i   @ 9:18
                    ID: n2   @ 9:22
                UnaryOp: p++   @ 9:26
                    ID: i   @ 9:26
                Compound:    @ 9:1
                    Assignment: =   @ 10:9
                        ID: flag   @ 10:9
                        Constant: int, 1   @ 10:16
                    For:    @ 11:9
                        Assignment: =   @ 11:14
                            ID: j   @ 11:14
                            Constant: int, 2   @ 11:18
                        BinaryOp: <=   @ 11:21
                            ID: j   @ 11:21
                            BinaryOp: /   @ 11:26
                                ID: i   @ 11:26
                                Constant: int, 2   @ 11:28
                        UnaryOp: p++   @ 11:31
                            ID: j   @ 11:31
                        If:    @ 12:13
                            BinaryOp: ==   @ 12:17
                                BinaryOp: %   @ 12:17
                                    ID: i   @ 12:17
                                    ID: j   @ 12:21
                                Constant: int, 0   @ 12:26
                            Compound:    @ 12:1
                                Assignment: =   @ 13:17
                                    ID: flag   @ 13:17
                                    Constant: int, 0   @ 13:24
                                Break:    @ 14:17
                    If:    @ 16:9
                        BinaryOp: ==   @ 16:13
                            ID: flag   @ 16:13
                            Constant: int, 1   @ 16:21
                        Print:    @ 17:13
                            ExprList:    @ 17:19
                                ID: i   @ 17:19
                                Constant: string, "  "   @ 17:22
            Return:    @ 19:5
