Program: 
    FuncDef:    @ 7:5
        Type: ['int']   @ 7:1
        Decl: ID(name='power',  type=None  )   @ 7:5
            FuncDecl:    @ 7:5
                ParamList:    @ 7:16
                    Decl: ID(name='n',  type=None  )   @ 7:16
                        VarDecl:    @ 7:16
                            Type: ['int']   @ 7:12
                    Decl: ID(name='r',  type=None  )   @ 7:23
                        VarDecl:    @ 7:23
                            Type: ['int']   @ 7:19
                VarDecl:    @ 7:5
                    Type: ['int']   @ 7:1
        Compound:    @ 7:26
            Decl: ID(name='p',  type=None  )   @ 8:9
                VarDecl:    @ 8:9
                    Type: ['int']   @ 8:5
                Constant: int, 1   @ 8:13
            For:    @ 9:5
                DeclList:    @ 9:5
                    Decl: ID(name='c',  type=None  )   @ 9:14
                        VarDecl:    @ 9:14
                            Type: ['int']   @ 9:10
                        Constant: int, 1   @ 9:18
                BinaryOp: <=   @ 9:21
                    ID: c   @ 9:21
                    ID: r   @ 9:26
                UnaryOp: p++   @ 9:29
                    ID: c   @ 9:29
                Assignment: =   @ 10:9
                    ID: p   @ 10:9
                    BinaryOp: *   @ 10:13
                        ID: p   @ 10:13
                        ID: n   @ 10:15
            Return:    @ 11:5
                ID: p   @ 11:12
    FuncDef:    @ 14:5
        Type: ['int']   @ 14:1
        Decl: ID(name='main',  type=None  )   @ 14:5
            FuncDecl:    @ 14:5
                VarDecl:    @ 14:5
                    Type: ['int']   @ 14:1
        Compound:    @ 14:12
            Decl: ID(name='n',  type=None  )   @ 15:9
                VarDecl:    @ 15:9
                    Type: ['int']   @ 15:5
            Decl: ID(name='sum',  type=None  )   @ 15:12
                VarDecl:    @ 15:12
                    Type: ['int']   @ 15:5
                Constant: int, 0   @ 15:18
            Decl: ID(name='temp',  type=None  )   @ 16:9
                VarDecl:    @ 16:9
                    Type: ['int']   @ 16:5
            Decl: ID(name='remainder',  type=None  )   @ 16:15
                VarDecl:    @ 16:15
                    Type: ['int']   @ 16:5
            Decl: ID(name='digits',  type=None  )   @ 16:26
                VarDecl:    @ 16:26
                    Type: ['int']   @ 16:5
                Constant: int, 0   @ 16:35
            Print:    @ 17:5
                Constant: string, "Input an integer: "   @ 17:11
            Read:    @ 18:5
                ID: n   @ 18:10
            Assignment: =   @ 19:5
                ID: temp   @ 19:5
                ID: n   @ 19:12
            While:    @ 20:5
                BinaryOp: !=   @ 20:12
                    ID: temp   @ 20:12
                    Constant: int, 0   @ 20:20
                Compound:    @ 20:23
                    Assignment: +=   @ 21:9
                        ID: digits   @ 21:9
                        Constant: int, 1   @ 21:19
                    Assignment: =   @ 22:9
                        ID: temp   @ 22:9
                        BinaryOp: /   @ 22:16
                            ID: temp   @ 22:16
                            Constant: int, 10   @ 22:23
            Assignment: =   @ 24:5
                ID: temp   @ 24:5
                ID: n   @ 24:12
            While:    @ 25:5
                BinaryOp: !=   @ 25:12
                    ID: temp   @ 25:12
                    Constant: int, 0   @ 25:20
                Compound:    @ 25:23
                    Assignment: =   @ 26:9
                        ID: remainder   @ 26:9
                        BinaryOp: %   @ 26:21
                            ID: temp   @ 26:21
                            Constant: int, 10   @ 26:28
                    Assignment: =   @ 27:9
                        ID: sum   @ 27:9
                        BinaryOp: +   @ 27:15
                            ID: sum   @ 27:15
                            FuncCall:    @ 27:21
                                ID: power   @ 27:21
                                ExprList:    @ 27:27
                                    ID: remainder   @ 27:27
                                    ID: digits   @ 27:38
                    Assignment: =   @ 28:9
                        ID: temp   @ 28:9
                        BinaryOp: /   @ 28:16
                            ID: temp   @ 28:16
                            Constant: int, 10   @ 28:23
            If:    @ 30:5
                BinaryOp: ==   @ 30:9
                    ID: n   @ 30:9
                    ID: sum   @ 30:14
                Print:    @ 31:7
                    ExprList:    @ 31:13
                        ID: n   @ 31:13
                        Constant: string, " is an Armstrong number.\n"   @ 31:16
                Print:    @ 33:7
                    ExprList:    @ 33:13
                        ID: n   @ 33:13
                        Constant: string, " is not an Armstrong number.\n"   @ 33:16
            Return:    @ 34:5
                Constant: int, 0   @ 34:12
